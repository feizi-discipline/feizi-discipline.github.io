{"version":3,"sources":["../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/htmlmixed/htmlmixed.js","../node_modules/codemirror/mode/pug/pug.js"],"names":["CodeMirror","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","defineMode","editorConf","config_","type","setStyle","indentUnit","config","defaults","htmlMode","prop","inText","stream","state","chain","parser","tokenize","ch","next","eat","match","inBlock","eatWhile","doctype","depth","inTag","baseState","tagName","tagStart","test","quote","closure","eol","isInAttribute","inAttribute","stringStartCol","column","style","terminator","lower","toLowerCase","Context","startOfLine","this","prev","context","indent","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","startState","baseIndent","token","sol","indentation","eatSpace","textAfter","fullLine","Pass","length","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","xmlCurrentTag","name","close","xmlCurrentContext","cx","push","reverse","defineMIME","mimeModes","mod","__webpack_require__","defaultTags","script","attrRegexpCache","getAttrValue","text","attr","regexp","RegExp","getAttrRegexp","getTagRegexp","anchored","addTags","from","to","tag","dest","i","unshift","parserConfig","getMode","tags","configTags","configScript","scriptTypes","matches","mode","html","htmlState","modeSpec","tagInfo","tagText","spec","findMatchingMode","endTagA","endTag","localState","localMode","pat","cur","search","backUp","maybeBackup","copyState","local","line","innerMode","KEYWORD","DOCTYPE","ID","CLASS","ATTRS_NEST","{","(","[","jsMode","State","javaScriptLine","javaScriptLineExcludesColon","javaScriptArguments","javaScriptArgumentsDepth","isInterpolating","interpolationNesting","jsState","restOfLine","isIncludeFiltered","isEach","lastTag","scriptType","isAttrs","attrsNest","inAttributeName","attributeIsType","attrValue","indentOf","Infinity","indentToken","innerState","innerModeForLine","interpolation","filter","innerModes","substring","setInnerMode","force","hideFirstChars","skipToEnd","prototype","copy","res","slice","tok","peek","interpolationContinued","includeFilteredContinued","eachContinued","attrsContinued","pop","trim","toString","Function","replace","ex","javaScript","mixinCallAfter","callArguments","yieldStatement","caseStatement","when","defaultStatement","extendsStatement","append","prepend","block","include","includeFiltered","mixin","call","conditional","each","whileStatement","captures","code","id","className","attrs","attributesBlock","comment","colon","indexOf","dot","fail"],"mappings":"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","file":"static/js/2.a45749c3.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function lower(tagName) {\n      return tagName && tagName.toLowerCase();\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName || \"\";\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(lower(parentTagName)) || !config.contextGrabbers[lower(parentTagName)].hasOwnProperty(lower(nextTagName))) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(lower(state.context.tagName))) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(lower(tagName))) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(lower(context.tagName))) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[lower(context.tagName)];\n            if (grabbers && grabbers.hasOwnProperty(lower(tagAfter[2]))) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag,\n      allowMissingTagName: parserConfig.allowMissingTagName\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\", \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter, line);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../javascript/javascript\"), require(\"../css/css\"), require(\"../htmlmixed/htmlmixed\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../javascript/javascript\", \"../css/css\", \"../htmlmixed/htmlmixed\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pug\", function (config) {\n    // token types\n    var KEYWORD = 'keyword';\n    var DOCTYPE = 'meta';\n    var ID = 'builtin';\n    var CLASS = 'qualifier';\n    var ATTRS_NEST = {\n      '{': '}',\n      '(': ')',\n      '[': ']'\n    };\n    var jsMode = CodeMirror.getMode(config, 'javascript');\n\n    function State() {\n      this.javaScriptLine = false;\n      this.javaScriptLineExcludesColon = false;\n      this.javaScriptArguments = false;\n      this.javaScriptArgumentsDepth = 0;\n      this.isInterpolating = false;\n      this.interpolationNesting = 0;\n      this.jsState = CodeMirror.startState(jsMode);\n      this.restOfLine = '';\n      this.isIncludeFiltered = false;\n      this.isEach = false;\n      this.lastTag = '';\n      this.scriptType = ''; // Attributes Mode\n\n      this.isAttrs = false;\n      this.attrsNest = [];\n      this.inAttributeName = true;\n      this.attributeIsType = false;\n      this.attrValue = ''; // Indented Mode\n\n      this.indentOf = Infinity;\n      this.indentToken = '';\n      this.innerMode = null;\n      this.innerState = null;\n      this.innerModeForLine = false;\n    }\n    /**\n     * Safely copy a state\n     *\n     * @return {State}\n     */\n\n\n    State.prototype.copy = function () {\n      var res = new State();\n      res.javaScriptLine = this.javaScriptLine;\n      res.javaScriptLineExcludesColon = this.javaScriptLineExcludesColon;\n      res.javaScriptArguments = this.javaScriptArguments;\n      res.javaScriptArgumentsDepth = this.javaScriptArgumentsDepth;\n      res.isInterpolating = this.isInterpolating;\n      res.interpolationNesting = this.interpolationNesting;\n      res.jsState = CodeMirror.copyState(jsMode, this.jsState);\n      res.innerMode = this.innerMode;\n\n      if (this.innerMode && this.innerState) {\n        res.innerState = CodeMirror.copyState(this.innerMode, this.innerState);\n      }\n\n      res.restOfLine = this.restOfLine;\n      res.isIncludeFiltered = this.isIncludeFiltered;\n      res.isEach = this.isEach;\n      res.lastTag = this.lastTag;\n      res.scriptType = this.scriptType;\n      res.isAttrs = this.isAttrs;\n      res.attrsNest = this.attrsNest.slice();\n      res.inAttributeName = this.inAttributeName;\n      res.attributeIsType = this.attributeIsType;\n      res.attrValue = this.attrValue;\n      res.indentOf = this.indentOf;\n      res.indentToken = this.indentToken;\n      res.innerModeForLine = this.innerModeForLine;\n      return res;\n    };\n\n    function javaScript(stream, state) {\n      if (stream.sol()) {\n        // if javaScriptLine was set at end of line, ignore it\n        state.javaScriptLine = false;\n        state.javaScriptLineExcludesColon = false;\n      }\n\n      if (state.javaScriptLine) {\n        if (state.javaScriptLineExcludesColon && stream.peek() === ':') {\n          state.javaScriptLine = false;\n          state.javaScriptLineExcludesColon = false;\n          return;\n        }\n\n        var tok = jsMode.token(stream, state.jsState);\n        if (stream.eol()) state.javaScriptLine = false;\n        return tok || true;\n      }\n    }\n\n    function javaScriptArguments(stream, state) {\n      if (state.javaScriptArguments) {\n        if (state.javaScriptArgumentsDepth === 0 && stream.peek() !== '(') {\n          state.javaScriptArguments = false;\n          return;\n        }\n\n        if (stream.peek() === '(') {\n          state.javaScriptArgumentsDepth++;\n        } else if (stream.peek() === ')') {\n          state.javaScriptArgumentsDepth--;\n        }\n\n        if (state.javaScriptArgumentsDepth === 0) {\n          state.javaScriptArguments = false;\n          return;\n        }\n\n        var tok = jsMode.token(stream, state.jsState);\n        return tok || true;\n      }\n    }\n\n    function yieldStatement(stream) {\n      if (stream.match(/^yield\\b/)) {\n        return 'keyword';\n      }\n    }\n\n    function doctype(stream) {\n      if (stream.match(/^(?:doctype) *([^\\n]+)?/)) {\n        return DOCTYPE;\n      }\n    }\n\n    function interpolation(stream, state) {\n      if (stream.match('#{')) {\n        state.isInterpolating = true;\n        state.interpolationNesting = 0;\n        return 'punctuation';\n      }\n    }\n\n    function interpolationContinued(stream, state) {\n      if (state.isInterpolating) {\n        if (stream.peek() === '}') {\n          state.interpolationNesting--;\n\n          if (state.interpolationNesting < 0) {\n            stream.next();\n            state.isInterpolating = false;\n            return 'punctuation';\n          }\n        } else if (stream.peek() === '{') {\n          state.interpolationNesting++;\n        }\n\n        return jsMode.token(stream, state.jsState) || true;\n      }\n    }\n\n    function caseStatement(stream, state) {\n      if (stream.match(/^case\\b/)) {\n        state.javaScriptLine = true;\n        return KEYWORD;\n      }\n    }\n\n    function when(stream, state) {\n      if (stream.match(/^when\\b/)) {\n        state.javaScriptLine = true;\n        state.javaScriptLineExcludesColon = true;\n        return KEYWORD;\n      }\n    }\n\n    function defaultStatement(stream) {\n      if (stream.match(/^default\\b/)) {\n        return KEYWORD;\n      }\n    }\n\n    function extendsStatement(stream, state) {\n      if (stream.match(/^extends?\\b/)) {\n        state.restOfLine = 'string';\n        return KEYWORD;\n      }\n    }\n\n    function append(stream, state) {\n      if (stream.match(/^append\\b/)) {\n        state.restOfLine = 'variable';\n        return KEYWORD;\n      }\n    }\n\n    function prepend(stream, state) {\n      if (stream.match(/^prepend\\b/)) {\n        state.restOfLine = 'variable';\n        return KEYWORD;\n      }\n    }\n\n    function block(stream, state) {\n      if (stream.match(/^block\\b *(?:(prepend|append)\\b)?/)) {\n        state.restOfLine = 'variable';\n        return KEYWORD;\n      }\n    }\n\n    function include(stream, state) {\n      if (stream.match(/^include\\b/)) {\n        state.restOfLine = 'string';\n        return KEYWORD;\n      }\n    }\n\n    function includeFiltered(stream, state) {\n      if (stream.match(/^include:([a-zA-Z0-9\\-]+)/, false) && stream.match('include')) {\n        state.isIncludeFiltered = true;\n        return KEYWORD;\n      }\n    }\n\n    function includeFilteredContinued(stream, state) {\n      if (state.isIncludeFiltered) {\n        var tok = filter(stream, state);\n        state.isIncludeFiltered = false;\n        state.restOfLine = 'string';\n        return tok;\n      }\n    }\n\n    function mixin(stream, state) {\n      if (stream.match(/^mixin\\b/)) {\n        state.javaScriptLine = true;\n        return KEYWORD;\n      }\n    }\n\n    function call(stream, state) {\n      if (stream.match(/^\\+([-\\w]+)/)) {\n        if (!stream.match(/^\\( *[-\\w]+ *=/, false)) {\n          state.javaScriptArguments = true;\n          state.javaScriptArgumentsDepth = 0;\n        }\n\n        return 'variable';\n      }\n\n      if (stream.match('+#{', false)) {\n        stream.next();\n        state.mixinCallAfter = true;\n        return interpolation(stream, state);\n      }\n    }\n\n    function callArguments(stream, state) {\n      if (state.mixinCallAfter) {\n        state.mixinCallAfter = false;\n\n        if (!stream.match(/^\\( *[-\\w]+ *=/, false)) {\n          state.javaScriptArguments = true;\n          state.javaScriptArgumentsDepth = 0;\n        }\n\n        return true;\n      }\n    }\n\n    function conditional(stream, state) {\n      if (stream.match(/^(if|unless|else if|else)\\b/)) {\n        state.javaScriptLine = true;\n        return KEYWORD;\n      }\n    }\n\n    function each(stream, state) {\n      if (stream.match(/^(- *)?(each|for)\\b/)) {\n        state.isEach = true;\n        return KEYWORD;\n      }\n    }\n\n    function eachContinued(stream, state) {\n      if (state.isEach) {\n        if (stream.match(/^ in\\b/)) {\n          state.javaScriptLine = true;\n          state.isEach = false;\n          return KEYWORD;\n        } else if (stream.sol() || stream.eol()) {\n          state.isEach = false;\n        } else if (stream.next()) {\n          while (!stream.match(/^ in\\b/, false) && stream.next()) {\n            ;\n          }\n\n          return 'variable';\n        }\n      }\n    }\n\n    function whileStatement(stream, state) {\n      if (stream.match(/^while\\b/)) {\n        state.javaScriptLine = true;\n        return KEYWORD;\n      }\n    }\n\n    function tag(stream, state) {\n      var captures;\n\n      if (captures = stream.match(/^(\\w(?:[-:\\w]*\\w)?)\\/?/)) {\n        state.lastTag = captures[1].toLowerCase();\n\n        if (state.lastTag === 'script') {\n          state.scriptType = 'application/javascript';\n        }\n\n        return 'tag';\n      }\n    }\n\n    function filter(stream, state) {\n      if (stream.match(/^:([\\w\\-]+)/)) {\n        var innerMode;\n\n        if (config && config.innerModes) {\n          innerMode = config.innerModes(stream.current().substring(1));\n        }\n\n        if (!innerMode) {\n          innerMode = stream.current().substring(1);\n        }\n\n        if (typeof innerMode === 'string') {\n          innerMode = CodeMirror.getMode(config, innerMode);\n        }\n\n        setInnerMode(stream, state, innerMode);\n        return 'atom';\n      }\n    }\n\n    function code(stream, state) {\n      if (stream.match(/^(!?=|-)/)) {\n        state.javaScriptLine = true;\n        return 'punctuation';\n      }\n    }\n\n    function id(stream) {\n      if (stream.match(/^#([\\w-]+)/)) {\n        return ID;\n      }\n    }\n\n    function className(stream) {\n      if (stream.match(/^\\.([\\w-]+)/)) {\n        return CLASS;\n      }\n    }\n\n    function attrs(stream, state) {\n      if (stream.peek() == '(') {\n        stream.next();\n        state.isAttrs = true;\n        state.attrsNest = [];\n        state.inAttributeName = true;\n        state.attrValue = '';\n        state.attributeIsType = false;\n        return 'punctuation';\n      }\n    }\n\n    function attrsContinued(stream, state) {\n      if (state.isAttrs) {\n        if (ATTRS_NEST[stream.peek()]) {\n          state.attrsNest.push(ATTRS_NEST[stream.peek()]);\n        }\n\n        if (state.attrsNest[state.attrsNest.length - 1] === stream.peek()) {\n          state.attrsNest.pop();\n        } else if (stream.eat(')')) {\n          state.isAttrs = false;\n          return 'punctuation';\n        }\n\n        if (state.inAttributeName && stream.match(/^[^=,\\)!]+/)) {\n          if (stream.peek() === '=' || stream.peek() === '!') {\n            state.inAttributeName = false;\n            state.jsState = CodeMirror.startState(jsMode);\n\n            if (state.lastTag === 'script' && stream.current().trim().toLowerCase() === 'type') {\n              state.attributeIsType = true;\n            } else {\n              state.attributeIsType = false;\n            }\n          }\n\n          return 'attribute';\n        }\n\n        var tok = jsMode.token(stream, state.jsState);\n\n        if (state.attributeIsType && tok === 'string') {\n          state.scriptType = stream.current().toString();\n        }\n\n        if (state.attrsNest.length === 0 && (tok === 'string' || tok === 'variable' || tok === 'keyword')) {\n          try {\n            Function('', 'var x ' + state.attrValue.replace(/,\\s*$/, '').replace(/^!/, ''));\n            state.inAttributeName = true;\n            state.attrValue = '';\n            stream.backUp(stream.current().length);\n            return attrsContinued(stream, state);\n          } catch (ex) {//not the end of an attribute\n          }\n        }\n\n        state.attrValue += stream.current();\n        return tok || true;\n      }\n    }\n\n    function attributesBlock(stream, state) {\n      if (stream.match(/^&attributes\\b/)) {\n        state.javaScriptArguments = true;\n        state.javaScriptArgumentsDepth = 0;\n        return 'keyword';\n      }\n    }\n\n    function indent(stream) {\n      if (stream.sol() && stream.eatSpace()) {\n        return 'indent';\n      }\n    }\n\n    function comment(stream, state) {\n      if (stream.match(/^ *\\/\\/(-)?([^\\n]*)/)) {\n        state.indentOf = stream.indentation();\n        state.indentToken = 'comment';\n        return 'comment';\n      }\n    }\n\n    function colon(stream) {\n      if (stream.match(/^: */)) {\n        return 'colon';\n      }\n    }\n\n    function text(stream, state) {\n      if (stream.match(/^(?:\\| ?| )([^\\n]+)/)) {\n        return 'string';\n      }\n\n      if (stream.match(/^(<[^\\n]*)/, false)) {\n        // html string\n        setInnerMode(stream, state, 'htmlmixed');\n        state.innerModeForLine = true;\n        return innerMode(stream, state, true);\n      }\n    }\n\n    function dot(stream, state) {\n      if (stream.eat('.')) {\n        var innerMode = null;\n\n        if (state.lastTag === 'script' && state.scriptType.toLowerCase().indexOf('javascript') != -1) {\n          innerMode = state.scriptType.toLowerCase().replace(/\"|'/g, '');\n        } else if (state.lastTag === 'style') {\n          innerMode = 'css';\n        }\n\n        setInnerMode(stream, state, innerMode);\n        return 'dot';\n      }\n    }\n\n    function fail(stream) {\n      stream.next();\n      return null;\n    }\n\n    function setInnerMode(stream, state, mode) {\n      mode = CodeMirror.mimeModes[mode] || mode;\n      mode = config.innerModes ? config.innerModes(mode) || mode : mode;\n      mode = CodeMirror.mimeModes[mode] || mode;\n      mode = CodeMirror.getMode(config, mode);\n      state.indentOf = stream.indentation();\n\n      if (mode && mode.name !== 'null') {\n        state.innerMode = mode;\n      } else {\n        state.indentToken = 'string';\n      }\n    }\n\n    function innerMode(stream, state, force) {\n      if (stream.indentation() > state.indentOf || state.innerModeForLine && !stream.sol() || force) {\n        if (state.innerMode) {\n          if (!state.innerState) {\n            state.innerState = state.innerMode.startState ? CodeMirror.startState(state.innerMode, stream.indentation()) : {};\n          }\n\n          return stream.hideFirstChars(state.indentOf + 2, function () {\n            return state.innerMode.token(stream, state.innerState) || true;\n          });\n        } else {\n          stream.skipToEnd();\n          return state.indentToken;\n        }\n      } else if (stream.sol()) {\n        state.indentOf = Infinity;\n        state.indentToken = null;\n        state.innerMode = null;\n        state.innerState = null;\n      }\n    }\n\n    function restOfLine(stream, state) {\n      if (stream.sol()) {\n        // if restOfLine was set at end of line, ignore it\n        state.restOfLine = '';\n      }\n\n      if (state.restOfLine) {\n        stream.skipToEnd();\n        var tok = state.restOfLine;\n        state.restOfLine = '';\n        return tok;\n      }\n    }\n\n    function startState() {\n      return new State();\n    }\n\n    function copyState(state) {\n      return state.copy();\n    }\n    /**\n     * Get the next token in the stream\n     *\n     * @param {Stream} stream\n     * @param {State} state\n     */\n\n\n    function nextToken(stream, state) {\n      var tok = innerMode(stream, state) || restOfLine(stream, state) || interpolationContinued(stream, state) || includeFilteredContinued(stream, state) || eachContinued(stream, state) || attrsContinued(stream, state) || javaScript(stream, state) || javaScriptArguments(stream, state) || callArguments(stream, state) || yieldStatement(stream) || doctype(stream) || interpolation(stream, state) || caseStatement(stream, state) || when(stream, state) || defaultStatement(stream) || extendsStatement(stream, state) || append(stream, state) || prepend(stream, state) || block(stream, state) || include(stream, state) || includeFiltered(stream, state) || mixin(stream, state) || call(stream, state) || conditional(stream, state) || each(stream, state) || whileStatement(stream, state) || tag(stream, state) || filter(stream, state) || code(stream, state) || id(stream) || className(stream) || attrs(stream, state) || attributesBlock(stream, state) || indent(stream) || text(stream, state) || comment(stream, state) || colon(stream) || dot(stream, state) || fail(stream);\n      return tok === true ? null : tok;\n    }\n\n    return {\n      startState: startState,\n      copyState: copyState,\n      token: nextToken\n    };\n  }, 'javascript', 'css', 'htmlmixed');\n  CodeMirror.defineMIME('text/x-pug', 'pug');\n  CodeMirror.defineMIME('text/x-jade', 'pug');\n});"],"sourceRoot":""}