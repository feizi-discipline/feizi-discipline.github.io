{"version":3,"sources":["../node_modules/codemirror/mode/javascript/javascript.js"],"names":["CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","this","class","super","yield","export","import","extends","await","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","expressionAllowed","inSet","readRegexp","current","tokenQuasi","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","number","variable","regexp","jsonld-keyword","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","parseJS","cc","marked","hasOwnProperty","combinator","length","pop","expression","statement","lex","pass","i","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","inner","Context","Var","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/0.365e1192.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"javascript\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var trackScope = parserConfig.trackScope !== false;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n    var keywords = function () {\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var A = kw(\"keyword a\"),\n          B = kw(\"keyword b\"),\n          C = kw(\"keyword c\"),\n          D = kw(\"keyword d\");\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      };\n      return {\n        \"if\": kw(\"if\"),\n        \"while\": A,\n        \"with\": A,\n        \"else\": B,\n        \"do\": B,\n        \"try\": B,\n        \"finally\": B,\n        \"return\": D,\n        \"break\": D,\n        \"continue\": D,\n        \"new\": kw(\"new\"),\n        \"delete\": C,\n        \"void\": C,\n        \"throw\": C,\n        \"debugger\": kw(\"debugger\"),\n        \"var\": kw(\"var\"),\n        \"const\": kw(\"var\"),\n        \"let\": kw(\"var\"),\n        \"function\": kw(\"function\"),\n        \"catch\": kw(\"catch\"),\n        \"for\": kw(\"for\"),\n        \"switch\": kw(\"switch\"),\n        \"case\": kw(\"case\"),\n        \"default\": kw(\"default\"),\n        \"in\": operator,\n        \"typeof\": operator,\n        \"instanceof\": operator,\n        \"true\": atom,\n        \"false\": atom,\n        \"null\": atom,\n        \"undefined\": atom,\n        \"NaN\": atom,\n        \"Infinity\": atom,\n        \"this\": kw(\"this\"),\n        \"class\": kw(\"class\"),\n        \"super\": kw(\"atom\"),\n        \"yield\": C,\n        \"export\": kw(\"export\"),\n        \"import\": kw(\"import\"),\n        \"extends\": C,\n        \"await\": C\n      };\n    }();\n\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n    function readRegexp(stream) {\n      var escaped = false,\n          next,\n          inSet = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (next == \"/\" && !inSet) return;\n          if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n        return ret(\"number\", \"number\");\n      } else if (ch == \".\" && stream.match(\"..\")) {\n        return ret(\"spread\", \"meta\");\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"=\" && stream.eat(\">\")) {\n        return ret(\"=>\", \"operator\");\n      } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n        return ret(\"number\", \"number\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (expressionAllowed(stream, state, 1)) {\n          readRegexp(stream);\n          stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n          return ret(\"regexp\", \"string-2\");\n        } else {\n          stream.eat(\"=\");\n          return ret(\"operator\", \"operator\", stream.current());\n        }\n      } else if (ch == \"`\") {\n        state.tokenize = tokenQuasi;\n        return tokenQuasi(stream, state);\n      } else if (ch == \"#\" && stream.peek() == \"!\") {\n        stream.skipToEnd();\n        return ret(\"meta\", \"meta\");\n      } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n        return ret(\"variable\", \"property\");\n      } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (isOperatorChar.test(ch)) {\n        if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n          if (stream.eat(\"=\")) {\n            if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n          } else if (/[<>*+\\-|&?]/.test(ch)) {\n            stream.eat(ch);\n            if (ch == \">\") stream.eat(ch);\n          }\n        }\n\n        if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n        return ret(\"operator\", \"operator\", stream.current());\n      } else if (wordRE.test(ch)) {\n        stream.eatWhile(wordRE);\n        var word = stream.current();\n\n        if (state.lastType != \".\") {\n          if (keywords.propertyIsEnumerable(word)) {\n            var kw = keywords[word];\n            return ret(kw.type, kw.style, word);\n          }\n\n          if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n        }\n\n        return ret(\"variable\", \"variable\", word);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n          state.tokenize = tokenBase;\n          return ret(\"jsonld-keyword\", \"meta\");\n        }\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenQuasi(stream, state) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return ret(\"quasi\", \"string-2\", stream.current());\n    }\n\n    var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n\n    function findFatArrow(stream, state) {\n      if (state.fatArrowAt) state.fatArrowAt = null;\n      var arrow = stream.string.indexOf(\"=>\", stream.start);\n      if (arrow < 0) return;\n\n      if (isTS) {\n        // Try to skip TypeScript return type declarations after the arguments\n        var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n        if (m) arrow = m.index;\n      }\n\n      var depth = 0,\n          sawSomething = false;\n\n      for (var pos = arrow - 1; pos >= 0; --pos) {\n        var ch = stream.string.charAt(pos);\n        var bracket = brackets.indexOf(ch);\n\n        if (bracket >= 0 && bracket < 3) {\n          if (!depth) {\n            ++pos;\n            break;\n          }\n\n          if (--depth == 0) {\n            if (ch == \"(\") sawSomething = true;\n            break;\n          }\n        } else if (bracket >= 3 && bracket < 6) {\n          ++depth;\n        } else if (wordRE.test(ch)) {\n          sawSomething = true;\n        } else if (/[\"'\\/`]/.test(ch)) {\n          for (;; --pos) {\n            if (pos == 0) return;\n            var next = stream.string.charAt(pos - 1);\n\n            if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n              pos--;\n              break;\n            }\n          }\n        } else if (sawSomething && !depth) {\n          ++pos;\n          break;\n        }\n      }\n\n      if (sawSomething && !depth) state.fatArrowAt = pos;\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true,\n      \"this\": true,\n      \"import\": true,\n      \"jsonld-keyword\": true\n    };\n\n    function JSLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      if (!trackScope) return false;\n\n      for (var v = state.localVars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n\n      for (var cx = state.context; cx; cx = cx.prev) {\n        for (var v = cx.vars; v; v = v.next) {\n          if (v.name == varname) return true;\n        }\n      }\n    }\n\n    function parseJS(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      cx.style = style;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) {\n            cc.pop()();\n          }\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          return style;\n        }\n      }\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        cx.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) {\n        if (v.name == name) return true;\n      }\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n      cx.marked = \"def\";\n      if (!trackScope) return;\n\n      if (state.context) {\n        if (state.lexical.info == \"var\" && state.context && state.context.block) {\n          // FIXME function decls are also not block scoped\n          var newContext = registerVarScoped(varname, state.context);\n\n          if (newContext != null) {\n            state.context = newContext;\n            return;\n          }\n        } else if (!inList(varname, state.localVars)) {\n          state.localVars = new Var(varname, state.localVars);\n          return;\n        }\n      } // Fall through means this is global\n\n\n      if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n\n    function registerVarScoped(varname, context) {\n      if (!context) {\n        return null;\n      } else if (context.block) {\n        var inner = registerVarScoped(varname, context.prev);\n        if (!inner) return null;\n        if (inner == context.prev) return context;\n        return new Context(inner, context.vars, true);\n      } else if (inList(varname, context.vars)) {\n        return context;\n      } else {\n        return new Context(context.prev, new Var(varname, context.vars), false);\n      }\n    }\n\n    function isModifier(name) {\n      return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    } // Combinators\n\n\n    function Context(prev, vars, block) {\n      this.prev = prev;\n      this.vars = vars;\n      this.block = block;\n    }\n\n    function Var(name, next) {\n      this.name = name;\n      this.next = next;\n    }\n\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n    function pushcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n      cx.state.localVars = defaultVars;\n    }\n\n    function pushblockcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n      cx.state.localVars = null;\n    }\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function result() {\n        var state = cx.state,\n            indent = state.indented;\n        if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) {\n          indent = outer.indented;\n        }\n        state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function exp(type) {\n        if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n      }\n\n      ;\n      return exp;\n    }\n\n    function statement(type, value) {\n      if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n      if (type == \"debugger\") return cont(expect(\";\"));\n      if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n\n      if (type == \"if\") {\n        if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n        return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n      }\n\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n      }\n\n      if (type == \"variable\") {\n        if (isTS && value == \"declare\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n          cx.marked = \"keyword\";\n          if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n        } else if (isTS && value == \"namespace\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), expression, statement, poplex);\n        } else if (isTS && value == \"abstract\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else {\n          return cont(pushlex(\"stat\"), maybelabel);\n        }\n      }\n\n      if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n      if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n      if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n      if (type == \"async\") return cont(statement);\n      if (value == \"@\") return cont(expression, statement);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function maybeCatchBinding(type) {\n      if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n\n    function expression(type, value) {\n      return expressionInner(type, value, false);\n    }\n\n    function expressionNoComma(type, value) {\n      return expressionInner(type, value, true);\n    }\n\n    function parenExpr(type) {\n      if (type != \"(\") return pass();\n      return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n    }\n\n    function expressionInner(type, value, noComma) {\n      if (cx.state.fatArrowAt == cx.stream.start) {\n        var body = noComma ? arrowBodyNoComma : arrowBody;\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n      }\n\n      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n      if (type == \"function\") return cont(functiondef, maybeop);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), classExpression, poplex);\n      }\n\n      if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n      if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n      if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n      if (type == \"quasi\") return pass(quasi, maybeop);\n      if (type == \"new\") return cont(maybeTarget(noComma));\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperatorComma(type, value) {\n      if (type == \",\") return cont(maybeexpression);\n      return maybeoperatorNoComma(type, value, false);\n    }\n\n    function maybeoperatorNoComma(type, value, noComma) {\n      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n      var expr = noComma == false ? expression : expressionNoComma;\n      if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n      if (type == \"operator\") {\n        if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n        if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n        if (value == \"?\") return cont(expression, expect(\":\"), expr);\n        return cont(expr);\n      }\n\n      if (type == \"quasi\") {\n        return pass(quasi, me);\n      }\n\n      if (type == \";\") return;\n      if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n      if (type == \".\") return cont(property, me);\n      if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n      if (isTS && value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr, me);\n      }\n\n      if (type == \"regexp\") {\n        cx.state.lastType = cx.marked = \"operator\";\n        cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n        return cont(expr);\n      }\n    }\n\n    function quasi(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n      return cont(maybeexpression, continueQuasi);\n    }\n\n    function continueQuasi(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasi);\n      }\n    }\n\n    function arrowBody(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expression);\n    }\n\n    function arrowBodyNoComma(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n\n    function maybeTarget(noComma) {\n      return function (type) {\n        if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n      };\n    }\n\n    function target(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorComma);\n      }\n    }\n\n    function targetNoComma(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorNoComma);\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type, value) {\n      if (type == \"async\") {\n        cx.marked = \"property\";\n        return cont(objprop);\n      } else if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        if (value == \"get\" || value == \"set\") return cont(getterSetter);\n        var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n        if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n        return cont(afterprop);\n      } else if (type == \"number\" || type == \"string\") {\n        cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n        return cont(afterprop);\n      } else if (type == \"jsonld-keyword\") {\n        return cont(afterprop);\n      } else if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), afterprop);\n      } else if (type == \"spread\") {\n        return cont(expressionNoComma, afterprop);\n      } else if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \":\") {\n        return pass(afterprop);\n      }\n    }\n\n    function getterSetter(type) {\n      if (type != \"variable\") return pass(afterprop);\n      cx.marked = \"property\";\n      return cont(functiondef);\n    }\n\n    function afterprop(type) {\n      if (type == \":\") return cont(expressionNoComma);\n      if (type == \"(\") return pass(functiondef);\n    }\n\n    function commasep(what, end, sep) {\n      function proceed(type, value) {\n        if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n          var lex = cx.state.lexical;\n          if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n          return cont(function (type, value) {\n            if (type == end || value == end) return pass();\n            return pass(what);\n          }, proceed);\n        }\n\n        if (type == end || value == end) return cont();\n        if (sep && sep.indexOf(\";\") > -1) return pass(what);\n        return cont(expect(end));\n      }\n\n      return function (type, value) {\n        if (type == end || value == end) return cont();\n        return pass(what, proceed);\n      };\n    }\n\n    function contCommasep(what, end, info) {\n      for (var i = 3; i < arguments.length; i++) {\n        cx.cc.push(arguments[i]);\n      }\n\n      return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function maybetype(type, value) {\n      if (isTS) {\n        if (type == \":\") return cont(typeexpr);\n        if (value == \"?\") return cont(maybetype);\n      }\n    }\n\n    function maybetypeOrIn(type, value) {\n      if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n    }\n\n    function mayberettype(type) {\n      if (isTS && type == \":\") {\n        if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n      }\n    }\n\n    function isKW(_, value) {\n      if (value == \"is\") {\n        cx.marked = \"keyword\";\n        return cont();\n      }\n    }\n\n    function typeexpr(type, value) {\n      if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n        cx.marked = \"keyword\";\n        return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n      }\n\n      if (type == \"variable\" || value == \"void\") {\n        cx.marked = \"type\";\n        return cont(afterType);\n      }\n\n      if (value == \"|\" || value == \"&\") return cont(typeexpr);\n      if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n      if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n      if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n      if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n\n      if (type == \"quasi\") {\n        return pass(quasiType, afterType);\n      }\n    }\n\n    function maybeReturnType(type) {\n      if (type == \"=>\") return cont(typeexpr);\n    }\n\n    function typeprops(type) {\n      if (type.match(/[\\}\\)\\]]/)) return cont();\n      if (type == \",\" || type == \";\") return cont(typeprops);\n      return pass(typeprop, typeprops);\n    }\n\n    function typeprop(type, value) {\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(typeprop);\n      } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n        return cont(typeprop);\n      } else if (type == \":\") {\n        return cont(typeexpr);\n      } else if (type == \"[\") {\n        return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n      } else if (type == \"(\") {\n        return pass(functiondecl, typeprop);\n      } else if (!type.match(/[;\\}\\)\\],]/)) {\n        return cont();\n      }\n    }\n\n    function quasiType(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n      return cont(typeexpr, continueQuasiType);\n    }\n\n    function continueQuasiType(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasiType);\n      }\n    }\n\n    function typearg(type, value) {\n      if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n      if (type == \":\") return cont(typeexpr);\n      if (type == \"spread\") return cont(typearg);\n      return pass(typeexpr);\n    }\n\n    function afterType(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n      if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n      if (value == \"extends\" || value == \"implements\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr);\n      }\n\n      if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n    }\n\n    function maybeTypeArgs(_, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n\n    function typeparam() {\n      return pass(typeexpr, maybeTypeDefault);\n    }\n\n    function maybeTypeDefault(_, value) {\n      if (value == \"=\") return cont(typeexpr);\n    }\n\n    function vardef(_, value) {\n      if (value == \"enum\") {\n        cx.marked = \"keyword\";\n        return cont(enumdef);\n      }\n\n      return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n\n    function pattern(type, value) {\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(pattern);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont();\n      }\n\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"[\") return contCommasep(eltpattern, \"]\");\n      if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n\n    function proppattern(type, value) {\n      if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n        register(value);\n        return cont(maybeAssign);\n      }\n\n      if (type == \"variable\") cx.marked = \"property\";\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"}\") return pass();\n      if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n      return cont(expect(\":\"), pattern, maybeAssign);\n    }\n\n    function eltpattern() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function maybeAssign(_type, value) {\n      if (value == \"=\") return cont(expressionNoComma);\n    }\n\n    function vardefCont(type) {\n      if (type == \",\") return cont(vardef);\n    }\n\n    function maybeelse(type, value) {\n      if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n\n    function forspec(type, value) {\n      if (value == \"await\") return cont(forspec);\n      if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n    }\n\n    function forspec1(type) {\n      if (type == \"var\") return cont(vardef, forspec2);\n      if (type == \"variable\") return cont(forspec2);\n      return pass(forspec2);\n    }\n\n    function forspec2(type, value) {\n      if (type == \")\") return cont();\n      if (type == \";\") return cont(forspec2);\n\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression, forspec2);\n      }\n\n      return pass(expression, forspec2);\n    }\n\n    function functiondef(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondef);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n\n    function functiondecl(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondecl);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondecl);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n    }\n\n    function typename(type, value) {\n      if (type == \"keyword\" || type == \"variable\") {\n        cx.marked = \"type\";\n        return cont(typename);\n      } else if (value == \"<\") {\n        return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n      }\n    }\n\n    function funarg(type, value) {\n      if (value == \"@\") cont(expression, funarg);\n      if (type == \"spread\") return cont(funarg);\n\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(funarg);\n      }\n\n      if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n      return pass(pattern, maybetype, maybeAssign);\n    }\n\n    function classExpression(type, value) {\n      // Class expressions may have an optional name.\n      if (type == \"variable\") return className(type, value);\n      return classNameAfter(type, value);\n    }\n\n    function className(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(classNameAfter);\n      }\n    }\n\n    function classNameAfter(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n      if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n        if (value == \"implements\") cx.marked = \"keyword\";\n        return cont(isTS ? typeexpr : expression, classNameAfter);\n      }\n\n      if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n\n    function classBody(type, value) {\n      if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(classfield, classBody);\n      }\n\n      if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n      if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (isTS && type == \"(\") return pass(functiondecl, classBody);\n      if (type == \";\" || type == \",\") return cont(classBody);\n      if (type == \"}\") return cont();\n      if (value == \"@\") return cont(expression, classBody);\n    }\n\n    function classfield(type, value) {\n      if (value == \"!\") return cont(classfield);\n      if (value == \"?\") return cont(classfield);\n      if (type == \":\") return cont(typeexpr, maybeAssign);\n      if (value == \"=\") return cont(expressionNoComma);\n      var context = cx.state.lexical.prev,\n          isInterface = context && context.info == \"interface\";\n      return pass(isInterface ? functiondecl : functiondef);\n    }\n\n    function afterExport(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(maybeFrom, expect(\";\"));\n      }\n\n      if (value == \"default\") {\n        cx.marked = \"keyword\";\n        return cont(expression, expect(\";\"));\n      }\n\n      if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n      return pass(statement);\n    }\n\n    function exportField(type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(expect(\"variable\"));\n      }\n\n      if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n\n    function afterImport(type) {\n      if (type == \"string\") return cont();\n      if (type == \"(\") return pass(expression);\n      if (type == \".\") return pass(maybeoperatorComma);\n      return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n\n    function importSpec(type, value) {\n      if (type == \"{\") return contCommasep(importSpec, \"}\");\n      if (type == \"variable\") register(value);\n      if (value == \"*\") cx.marked = \"keyword\";\n      return cont(maybeAs);\n    }\n\n    function maybeMoreImports(type) {\n      if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n\n    function maybeAs(_type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(importSpec);\n      }\n    }\n\n    function maybeFrom(_type, value) {\n      if (value == \"from\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n    }\n\n    function arrayLiteral(type) {\n      if (type == \"]\") return cont();\n      return pass(commasep(expressionNoComma, \"]\"));\n    }\n\n    function enumdef() {\n      return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n\n    function enummember() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function isContinuedStatement(state, textAfter) {\n      return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n\n    function expressionAllowed(stream, state, backUp) {\n      return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        var state = {\n          tokenize: tokenBase,\n          lastType: \"sof\",\n          cc: [],\n          lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          context: parserConfig.localVars && new Context(null, null, false),\n          indented: basecolumn || 0\n        };\n        if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n          findFatArrow(stream, state);\n        }\n\n        if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n        return parseJS(state, style, type, content, stream);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical,\n            top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n        if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n          var c = state.cc[i];\n          if (c == poplex) lexical = lexical.prev;else if (c != maybeelse && c != popcontext) break;\n        }\n\n        while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) {\n          lexical = lexical.prev;\n        }\n\n        if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + indentUnit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      blockCommentStart: jsonMode ? null : \"/*\",\n      blockCommentEnd: jsonMode ? null : \"*/\",\n      blockCommentContinue: jsonMode ? null : \" * \",\n      lineComment: jsonMode ? null : \"//\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      helperType: jsonMode ? \"json\" : \"javascript\",\n      jsonldMode: jsonldMode,\n      jsonMode: jsonMode,\n      expressionAllowed: expressionAllowed,\n      skipExpression: function skipExpression(state) {\n        parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null));\n      }\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/x-json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/manifest+json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/ld+json\", {\n    name: \"javascript\",\n    jsonld: true\n  });\n  CodeMirror.defineMIME(\"text/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n  CodeMirror.defineMIME(\"application/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n});"],"sourceRoot":""}