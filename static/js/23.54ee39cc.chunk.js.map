{"version":3,"sources":["../node_modules/codemirror/mode/rust/rust.js","../node_modules/codemirror/addon/mode/simple.js"],"names":["CodeMirror","defineSimpleMode","start","regex","token","next","indent","dedent","string","string_raw","string_raw_hash","comment","meta","dontIndentStates","electricInput","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME","mod","__webpack_require__","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","RegExp","ignoreCase","unicode","source","String","Rule","data","push","this","apply","replace","result","i","length","asToken","tokenFunction","config","stream","state","pending","pend","shift","pos","text","local","end","match","tok","endToken","localState","m","mode","endScan","exec","current","index","curState","rule","matches","sol","stack","pop","enterLocalMode","indentation","indentUnit","j","backUp","join","cmp","a","b","props","prop","spec","pers","persistent","p","persistentStates","getMode","lState","startState","forceEnd","indentFunction","textAfter","line","arr","indexOf","Pass","rules","scan","dedentIfLineStart","slice","defineMode","simpleMode","states_","hasIndentation","list","orig","copyState","s","innerMode"],"mappings":"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","file":"static/js/23.54ee39cc.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"rust\", {\n    start: [// string and byte string\n    {\n      regex: /b?\"/,\n      token: \"string\",\n      next: \"string\"\n    }, // raw string and raw byte string\n    {\n      regex: /b?r\"/,\n      token: \"string\",\n      next: \"string_raw\"\n    }, {\n      regex: /b?r#+\"/,\n      token: \"string\",\n      next: \"string_raw_hash\"\n    }, // character\n    {\n      regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/,\n      token: \"string-2\"\n    }, // byte\n    {\n      regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/,\n      token: \"string-2\"\n    }, {\n      regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n      token: \"number\"\n    }, {\n      regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n      token: [\"keyword\", null, \"def\"]\n    }, {\n      regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n      token: \"keyword\"\n    }, {\n      regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/,\n      token: \"atom\"\n    }, {\n      regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/,\n      token: \"builtin\"\n    }, {\n      regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n      token: [\"keyword\", null, \"def\"]\n    }, {\n      regex: /#!?\\[.*\\]/,\n      token: \"meta\"\n    }, {\n      regex: /\\/\\/.*/,\n      token: \"comment\"\n    }, {\n      regex: /\\/\\*/,\n      token: \"comment\",\n      next: \"comment\"\n    }, {\n      regex: /[-+\\/*=<>!]+/,\n      token: \"operator\"\n    }, {\n      regex: /[a-zA-Z_]\\w*!/,\n      token: \"variable-3\"\n    }, {\n      regex: /[a-zA-Z_]\\w*/,\n      token: \"variable\"\n    }, {\n      regex: /[\\{\\[\\(]/,\n      indent: true\n    }, {\n      regex: /[\\}\\]\\)]/,\n      dedent: true\n    }],\n    string: [{\n      regex: /\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/,\n      token: \"string\"\n    }],\n    string_raw: [{\n      regex: /\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /[^\"]*/,\n      token: \"string\"\n    }],\n    string_raw_hash: [{\n      regex: /\"#+/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /(?:[^\"]|\"(?!#))*/,\n      token: \"string\"\n    }],\n    comment: [{\n      regex: /.*?\\*\\//,\n      token: \"comment\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"comment\"\n    }],\n    meta: {\n      dontIndentStates: [\"comment\"],\n      electricInput: /^\\s*\\}$/,\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\n  CodeMirror.defineMIME(\"text/rust\", \"rust\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n        meta = states.meta || {},\n        hasIndentation = false;\n\n    for (var state in states) {\n      if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [],\n            orig = states[state];\n\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n\n        for (var pers = state.persistentStates; pers; pers = pers.next) {\n          s.persistentStates = {\n            mode: pers.mode,\n            spec: pers.spec,\n            state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n            next: s.persistentStates\n          };\n        }\n\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) {\n      if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    }\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      if (val.unicode) flags += \"u\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n\n    for (var i = 0; i < val.length; i++) {\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    }\n\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n              m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            for (var j = 2; j < matches.length; j++) {\n              if (matches[j]) (state.pending || (state.pending = [])).push({\n                text: matches[j],\n                token: rule.token[j - 1]\n              });\n            }\n\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n    var props = 0;\n\n    for (var prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n    }\n\n    for (var prop in b) {\n      if (b.hasOwnProperty(prop)) props--;\n    }\n\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) {\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    }\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === val) return true;\n    }\n  }\n\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n          rules = states[state.state];\n\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n\n        break;\n      }\n\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});"],"sourceRoot":""}