{"version":3,"sources":["../node_modules/codemirror/mode/yaml/yaml.js","../node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js"],"names":["CodeMirror","defineMode","keywordRegex","RegExp","join","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","lineComment","fold","defineMIME","mod","__webpack_require__","FRONTMATTER","config","parserConfig","yamlMode","getMode","innerMode","base","localMode","mode","yaml","inner","copyState","end","style","indent","a","b","m","Pass","blankLine"],"mappings":"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","file":"static/js/28.b7948aee.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"yaml\", function () {\n    var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n    var keywordRegex = new RegExp(\"\\\\b((\" + cons.join(\")|(\") + \"))$\", 'i');\n    return {\n      token: function token(stream, state) {\n        var ch = stream.peek();\n        var esc = state.escaped;\n        state.escaped = false;\n        /* comments */\n\n        if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/)) return \"string\";\n\n        if (state.literal && stream.indentation() > state.keyCol) {\n          stream.skipToEnd();\n          return \"string\";\n        } else if (state.literal) {\n          state.literal = false;\n        }\n\n        if (stream.sol()) {\n          state.keyCol = 0;\n          state.pair = false;\n          state.pairStart = false;\n          /* document start */\n\n          if (stream.match('---')) {\n            return \"def\";\n          }\n          /* document end */\n\n\n          if (stream.match('...')) {\n            return \"def\";\n          }\n          /* array list item */\n\n\n          if (stream.match(/\\s*-\\s+/)) {\n            return 'meta';\n          }\n        }\n        /* inline pairs/lists */\n\n\n        if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n          if (ch == '{') state.inlinePairs++;else if (ch == '}') state.inlinePairs--;else if (ch == '[') state.inlineList++;else state.inlineList--;\n          return 'meta';\n        }\n        /* list separator */\n\n\n        if (state.inlineList > 0 && !esc && ch == ',') {\n          stream.next();\n          return 'meta';\n        }\n        /* pairs separator */\n\n\n        if (state.inlinePairs > 0 && !esc && ch == ',') {\n          state.keyCol = 0;\n          state.pair = false;\n          state.pairStart = false;\n          stream.next();\n          return 'meta';\n        }\n        /* start of value of a pair */\n\n\n        if (state.pairStart) {\n          /* block literals */\n          if (stream.match(/^\\s*(\\||\\>)\\s*/)) {\n            state.literal = true;\n            return 'meta';\n          }\n\n          ;\n          /* references */\n\n          if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) {\n            return 'variable-2';\n          }\n          /* numbers */\n\n\n          if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) {\n            return 'number';\n          }\n\n          if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) {\n            return 'number';\n          }\n          /* keywords */\n\n\n          if (stream.match(keywordRegex)) {\n            return 'keyword';\n          }\n        }\n        /* pairs (associative arrays) -> key */\n\n\n        if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n          state.pair = true;\n          state.keyCol = stream.indentation();\n          return \"atom\";\n        }\n\n        if (state.pair && stream.match(/^:\\s*/)) {\n          state.pairStart = true;\n          return 'meta';\n        }\n        /* nothing found, continue */\n\n\n        state.pairStart = false;\n        state.escaped = ch == '\\\\';\n        stream.next();\n        return null;\n      },\n      startState: function startState() {\n        return {\n          pair: false,\n          pairStart: false,\n          keyCol: 0,\n          inlinePairs: 0,\n          inlineList: 0,\n          literal: false,\n          escaped: false\n        };\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\n  CodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  var START = 0,\n      FRONTMATTER = 1,\n      BODY = 2; // a mixed mode for Markdown text with an optional YAML front matter\n\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\");\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\");\n\n    function localMode(state) {\n      return state.state == FRONTMATTER ? {\n        mode: yamlMode,\n        state: state.yaml\n      } : {\n        mode: innerMode,\n        state: state.inner\n      };\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          state: START,\n          yaml: null,\n          inner: CodeMirror.startState(innerMode)\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          state: state.state,\n          yaml: state.yaml && CodeMirror.copyState(yamlMode, state.yaml),\n          inner: CodeMirror.copyState(innerMode, state.inner)\n        };\n      },\n      token: function token(stream, state) {\n        if (state.state == START) {\n          if (stream.match('---', false)) {\n            state.state = FRONTMATTER;\n            state.yaml = CodeMirror.startState(yamlMode);\n            return yamlMode.token(stream, state.yaml);\n          } else {\n            state.state = BODY;\n            return innerMode.token(stream, state.inner);\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/(---|\\.\\.\\.)/, false);\n          var style = yamlMode.token(stream, state.yaml);\n\n          if (end) {\n            state.state = BODY;\n            state.yaml = null;\n          }\n\n          return style;\n        } else {\n          return innerMode.token(stream, state.inner);\n        }\n      },\n      innerMode: localMode,\n      indent: function indent(state, a, b) {\n        var m = localMode(state);\n        return m.mode.indent ? m.mode.indent(m.state, a, b) : CodeMirror.Pass;\n      },\n      blankLine: function blankLine(state) {\n        var m = localMode(state);\n        if (m.mode.blankLine) return m.mode.blankLine(m.state);\n      }\n    };\n  });\n});"],"sourceRoot":""}