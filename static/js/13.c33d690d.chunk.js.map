{"version":3,"sources":["../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/htmlmixed/htmlmixed.js","../node_modules/codemirror/mode/ruby/ruby.js","../node_modules/codemirror/mode/haml/haml.js"],"names":["CodeMirror","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","defineMode","editorConf","config_","type","setStyle","indentUnit","config","defaults","htmlMode","prop","inText","stream","state","chain","parser","tokenize","ch","next","eat","match","inBlock","eatWhile","doctype","depth","inTag","baseState","tagName","tagStart","test","quote","closure","eol","isInAttribute","inAttribute","stringStartCol","column","style","terminator","lower","toLowerCase","Context","startOfLine","this","prev","context","indent","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","startState","baseIndent","token","sol","indentation","eatSpace","textAfter","fullLine","Pass","length","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","xmlCurrentTag","name","close","xmlCurrentContext","cx","push","reverse","defineMIME","mimeModes","mod","__webpack_require__","defaultTags","script","attrRegexpCache","getAttrValue","text","attr","regexp","RegExp","getAttrRegexp","getTagRegexp","anchored","addTags","from","to","tag","dest","i","unshift","parserConfig","getMode","tags","configTags","configScript","scriptTypes","matches","mode","html","htmlState","modeSpec","tagInfo","tagText","spec","findMatchingMode","endTagA","endTag","localState","localMode","pat","cur","search","backUp","maybeBackup","copyState","local","line","innerMode","wordObj","words","o","e","keywordList","keywords","indentWords","dedentWords","opening","[","{","(","closing","]","}",")","curPunc","newtok","tokenBase","readBlockComment","m","phrase","mayIndent","readQuoted","start","pos","found","escaped","indexOf","regexpAhead","delim","propertyIsEnumerable","skipToEnd","pop","varList","lastTok","more","tokenBaseUntilBrace","peek","tokenBaseOnce","alreadyCalled","unescaped","continuedLine","kwtype","thisTok","word","firstChar","charAt","ct","closed","lineComment","fold","registerHelper","rubyMode","rubyInQuote","endQuote","rubyState","ruby","previousToken"],"mappings":"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","file":"static/js/13.c33d690d.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function lower(tagName) {\n      return tagName && tagName.toLowerCase();\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName || \"\";\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(lower(parentTagName)) || !config.contextGrabbers[lower(parentTagName)].hasOwnProperty(lower(nextTagName))) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(lower(state.context.tagName))) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(lower(tagName))) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(lower(context.tagName))) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[lower(context.tagName)];\n            if (grabbers && grabbers.hasOwnProperty(lower(tagAfter[2]))) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag,\n      allowMissingTagName: parserConfig.allowMissingTagName\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\", \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter, line);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordObj(words) {\n    var o = {};\n\n    for (var i = 0, e = words.length; i < e; ++i) {\n      o[words[i]] = true;\n    }\n\n    return o;\n  }\n\n  var keywordList = [\"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\", \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\", \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"],\n      keywords = wordObj(keywordList);\n  var indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"then\", \"catch\", \"loop\", \"proc\", \"begin\"]);\n  var dedentWords = wordObj([\"end\", \"until\"]);\n  var opening = {\n    \"[\": \"]\",\n    \"{\": \"}\",\n    \"(\": \")\"\n  };\n  var closing = {\n    \"]\": \"[\",\n    \"}\": \"{\",\n    \")\": \"(\"\n  };\n  CodeMirror.defineMode(\"ruby\", function (config) {\n    var curPunc;\n\n    function chain(newtok, stream, state) {\n      state.tokenize.push(newtok);\n      return newtok(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n        state.tokenize.push(readBlockComment);\n        return \"comment\";\n      }\n\n      if (stream.eatSpace()) return null;\n      var ch = stream.next(),\n          m;\n\n      if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n        return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n      } else if (ch == \"/\") {\n        if (regexpAhead(stream)) return chain(readQuoted(ch, \"string-2\", true), stream, state);else return \"operator\";\n      } else if (ch == \"%\") {\n        var style = \"string\",\n            embed = true;\n        if (stream.eat(\"s\")) style = \"atom\";else if (stream.eat(/[WQ]/)) style = \"string\";else if (stream.eat(/[r]/)) style = \"string-2\";else if (stream.eat(/[wxq]/)) {\n          style = \"string\";\n          embed = false;\n        }\n        var delim = stream.eat(/[^\\w\\s=]/);\n        if (!delim) return \"operator\";\n        if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n        return chain(readQuoted(delim, style, embed, true), stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n        return chain(readHereDoc(m[2], m[1]), stream, state);\n      } else if (ch == \"0\") {\n        if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);else stream.eatWhile(/[0-7]/);\n        return \"number\";\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n        return \"number\";\n      } else if (ch == \"?\") {\n        while (stream.match(/^\\\\[CM]-/)) {}\n\n        if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);else stream.next();\n        return \"string\";\n      } else if (ch == \":\") {\n        if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n        if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state); // :> :>> :< :<< are valid symbols\n\n        if (stream.eat(/[\\<\\>]/)) {\n          stream.eat(/[\\<\\>]/);\n          return \"atom\";\n        } // :+ :- :/ :* :| :& :! are valid symbols\n\n\n        if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n          return \"atom\";\n        } // Symbols can't start by a digit\n\n\n        if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n          stream.eatWhile(/[\\w$\\xa1-\\uffff]/); // Only one ? ! = is allowed and only as the last character\n\n          stream.eat(/[\\?\\!\\=]/);\n          return \"atom\";\n        }\n\n        return \"operator\";\n      } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n        stream.eat(\"@\");\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        return \"variable-2\";\n      } else if (ch == \"$\") {\n        if (stream.eat(/[a-zA-Z_]/)) {\n          stream.eatWhile(/[\\w]/);\n        } else if (stream.eat(/\\d/)) {\n          stream.eat(/\\d/);\n        } else {\n          stream.next(); // Must be a special global like $: or $!\n        }\n\n        return \"variable-3\";\n      } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        stream.eat(/[\\?\\!]/);\n        if (stream.eat(\":\")) return \"atom\";\n        return \"ident\";\n      } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n        curPunc = \"|\";\n        return null;\n      } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      } else if (ch == \"-\" && stream.eat(\">\")) {\n        return \"arrow\";\n      } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n        var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n        if (ch == \".\" && !more) curPunc = \".\";\n        return \"operator\";\n      } else {\n        return null;\n      }\n    }\n\n    function regexpAhead(stream) {\n      var start = stream.pos,\n          depth = 0,\n          next,\n          found = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (\"[{(\".indexOf(next) > -1) {\n            depth++;\n          } else if (\"]})\".indexOf(next) > -1) {\n            depth--;\n            if (depth < 0) break;\n          } else if (next == \"/\" && depth == 0) {\n            found = true;\n            break;\n          }\n\n          escaped = next == \"\\\\\";\n        } else {\n          escaped = false;\n        }\n      }\n\n      stream.backUp(stream.pos - start);\n      return found;\n    }\n\n    function tokenBaseUntilBrace(depth) {\n      if (!depth) depth = 1;\n      return function (stream, state) {\n        if (stream.peek() == \"}\") {\n          if (depth == 1) {\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          } else {\n            state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n          }\n        } else if (stream.peek() == \"{\") {\n          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n        }\n\n        return tokenBase(stream, state);\n      };\n    }\n\n    function tokenBaseOnce() {\n      var alreadyCalled = false;\n      return function (stream, state) {\n        if (alreadyCalled) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length - 1](stream, state);\n        }\n\n        alreadyCalled = true;\n        return tokenBase(stream, state);\n      };\n    }\n\n    function readQuoted(quote, style, embed, unescaped) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        if (state.context.type === 'read-quoted-paused') {\n          state.context = state.context.prev;\n          stream.eat(\"}\");\n        }\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && (unescaped || !escaped)) {\n            state.tokenize.pop();\n            break;\n          }\n\n          if (embed && ch == \"#\" && !escaped) {\n            if (stream.eat(\"{\")) {\n              if (quote == \"}\") {\n                state.context = {\n                  prev: state.context,\n                  type: 'read-quoted-paused'\n                };\n              }\n\n              state.tokenize.push(tokenBaseUntilBrace());\n              break;\n            } else if (/[@\\$]/.test(stream.peek())) {\n              state.tokenize.push(tokenBaseOnce());\n              break;\n            }\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        return style;\n      };\n    }\n\n    function readHereDoc(phrase, mayIndent) {\n      return function (stream, state) {\n        if (mayIndent) stream.eatSpace();\n        if (stream.match(phrase)) state.tokenize.pop();else stream.skipToEnd();\n        return \"string\";\n      };\n    }\n\n    function readBlockComment(stream, state) {\n      if (stream.sol() && stream.match(\"=end\") && stream.eol()) state.tokenize.pop();\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: [tokenBase],\n          indented: 0,\n          context: {\n            type: \"top\",\n            indented: -config.indentUnit\n          },\n          continuedLine: false,\n          lastTok: null,\n          varList: false\n        };\n      },\n      token: function token(stream, state) {\n        curPunc = null;\n        if (stream.sol()) state.indented = stream.indentation();\n        var style = state.tokenize[state.tokenize.length - 1](stream, state),\n            kwtype;\n        var thisTok = curPunc;\n\n        if (style == \"ident\") {\n          var word = stream.current();\n          style = state.lastTok == \".\" ? \"property\" : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : /^[A-Z]/.test(word) ? \"tag\" : state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList ? \"def\" : \"variable\";\n\n          if (style == \"keyword\") {\n            thisTok = word;\n            if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation()) kwtype = \"indent\";else if (word == \"do\" && state.context.indented < state.indented) kwtype = \"indent\";\n          }\n        }\n\n        if (curPunc || style && style != \"comment\") state.lastTok = thisTok;\n        if (curPunc == \"|\") state.varList = !state.varList;\n        if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc)) state.context = {\n          prev: state.context,\n          type: curPunc || style,\n          indented: state.indented\n        };else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev) state.context = state.context.prev;\n        if (stream.eol()) state.continuedLine = curPunc == \"\\\\\" || style == \"operator\";\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize[state.tokenize.length - 1] != tokenBase) return CodeMirror.Pass;\n        var firstChar = textAfter && textAfter.charAt(0);\n        var ct = state.context;\n        var closed = ct.type == closing[firstChar] || ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n        return ct.indented + (closed ? 0 : config.indentUnit) + (state.continuedLine ? config.indentUnit : 0);\n      },\n      electricInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ruby\", \"ruby\");\n  CodeMirror.registerHelper(\"hintWords\", \"ruby\", keywordList);\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\"; // full haml mode. This handled embedded ruby and html fragments too\n\n  CodeMirror.defineMode(\"haml\", function (config) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"htmlmixed\"\n    });\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function (stream, state) {\n        var ch = stream.peek();\n\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek(); // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n\n      if (state.previousToken.style == \"comment\") {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if (ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      } // do not handle --> as valid ruby, make it HTML close comment instead\n\n\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\")) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" || state.previousToken.style == \"closeAttributeTag\" || state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function startState() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: {\n            style: null,\n            indented: 0\n          },\n          tokenize: html\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false; // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n\n        if (style && style != \"commentLine\") {\n          state.previousToken = {\n            style: style,\n            indented: state.indented\n          };\n        } // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n\n\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        } // reprocess some of the specific style tag when finish setting previousToken\n\n\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});"],"sourceRoot":""}